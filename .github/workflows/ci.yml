name: Langulus::Anyness CI
on: [push, pull_request] # Trigger on pushes to all branches and for all pull-requests

env:
  CMAKE_VERSION: 3.22
  NINJA_VERSION: 1.10.2

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false # do not abort on a failed job
      matrix:
        config:
        - {
            # GCC 11.2 is the minimum required compiler, and comes with Ubuntu 22.04
            name: "Linux-GCC-11.2-Debug", artifact: "Linux.tar.xz",
            os: ubuntu-22.04,
            build_type: Debug,
            cc: "gcc-11.2", cxx: "g++-11.2",
            cmake_args: ""
          }
        - {
            # GCC 11.2 is the minimum required compiler, and comes with Ubuntu 22.04
            name: "Linux-GCC-11.2-Release", artifact: "Linux.tar.xz",
            os: ubuntu-22.04,
            build_type: RelWithDebInfo,
            cc: "gcc-11.2", cxx: "g++-11.2",
            cmake_args: ""
          }
        - {
            name: "Linux-Clang-14-Debug", artifact: "Linux.tar.xz",
            os: ubuntu-22.04,
            build_type: Debug,
            cc: "clang-14", cxx: "clang++-14",
            cmake_args: "-DCMAKE_CXX_FLAGS:STRING=\"-fsanitize=address -fno-omit-frame-pointer\""
          }
        - {
            name: "Linux-Clang-14-Release", artifact: "Linux.tar.xz",
            os: ubuntu-22.04,
            build_type: RelWithDebInfo,
            cc: "clang-14", cxx: "clang++-14",
            cmake_args: "-DCMAKE_CXX_FLAGS:STRING=\"-fsanitize=address -fno-omit-frame-pointer\""
          }
        - {
            name: "macOS-GCC-Debug", artifact: "macOS.tar.xz",
            os: macos-latest,
            build_type: Debug,
            cc: "gcc", cxx: "g++",
            cmake_args: ""
          }
        - {
            name: "macOS-GCC-Release", artifact: "macOS.tar.xz",
            os: macos-latest,
            build_type: RelWithDebInfo,
            cc: "gcc", cxx: "g++",
            cmake_args: ""
          }
        - {
            name: "macOS-Clang-Debug", artifact: "macOS.tar.xz",
            os: macos-latest,
            build_type: Debug,
            cc: "clang", cxx: "clang++",
            cmake_args: "-DCMAKE_CXX_FLAGS:STRING=\"-fsanitize=address -fno-omit-frame-pointer\""
          }
        - {
            name: "macOS-Clang-Release", artifact: "macOS.tar.xz",
            os: macos-latest,
            build_type: RelWithDebInfo,
            cc: "clang", cxx: "clang++",
            cmake_args: "-DCMAKE_CXX_FLAGS:STRING=\"-fsanitize=address -fno-omit-frame-pointer\""
          }
        - {
            name: "Windows-MSVC-2022-Debug-x64", artifact: "Windows-MSVC.tar.xz",
            os: windows-latest,
            build_type: Debug,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Auxiliary/Build/vcvars64.bat",
            cmake_args: "",
          }
        - {
            name: "Windows-MSVC-2022-Release-x64", artifact: "Windows-MSVC.tar.xz",
            os: windows-latest,
            build_type: RelWithDebInfo,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Auxiliary/Build/vcvars64.bat",
            cmake_args: "",
          }

    steps:
      - name: Clone
        uses: actions/checkout@v2
      - name: Configure
        run: cmake -G "Ninja" -D CMAKE_C_COMPILER=${{ matrix.config.cc }} -D CMAKE_CXX_COMPILER=${{ matrix.config.cxx }} -S . -B out/${{ matrix.config.name }} -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} ${{ matrix.config.cmake_args }}
      - name: Build
        run: cmake --build out/${{ matrix.config.name }} --config ${{ matrix.config.build_type }} ${{ matrix.config.cmake_args }}
      - name: Test
        run: ctest --output-on-failure
